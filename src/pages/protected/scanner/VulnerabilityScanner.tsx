import React, { useState, useEffect } from 'react';
import { 
  Search, AlertCircle, AlertTriangle, CheckCircle, Info, 
  Play, Pause, Trash2, Download, ChevronDown, ChevronUp, 
  ExternalLink, BarChart3, Clock, Calendar
} from 'lucide-react';
import { useAuth } from '../../../contexts/AuthContext';
import { supabase } from '../../../config/supabase';
import toast from 'react-hot-toast';
import { format } from 'date-fns';

interface ScanResult {
  id: string;
  user_id: string;
  target: string;
  scan_type: string;
  status: 'pending' | 'running' | 'completed' | 'failed';
  results: any;
  started_at: string;
  completed_at: string | null;
  created_at: string;
}

interface VulnerabilityScanner extends React.FC {
  getStatusColor: (status: string) => string;
  getSeverityColor: (severity: string) => string;
  formatDuration: (startDate: string, endDate: string | null) => string;
}

const VulnerabilityScanner: VulnerabilityScanner = () => {
  const { user } = useAuth();
  const [target, setTarget] = useState('');
  const [scanType, setScanType] = useState('comprehensive');
  const [scans, setScans] = useState<ScanResult[]>([]);
  const [expandedScans, setExpandedScans] = useState<Record<string, boolean>>({});
  const [isLoading, setIsLoading] = useState(true);
  const [isScanning, setIsScanning] = useState(false);
  
  useEffect(() => {
    if (!user) return;
    
    const fetchScans = async () => {
      try {
        const { data, error } = await supabase
          .from('vulnerability_scans')
          .select('*')
          .eq('user_id', user.id)
          .order('created_at', { ascending: false });
          
        if (error) throw error;
        
        setScans(data || []);
      } catch (error) {
        console.error('Error fetching scans:', error);
        toast.error('Failed to load scan history');
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchScans();
    
    // Subscribe to scan updates
    const scanSubscription = supabase
      .channel('vulnerability_scans')
      .on('postgres_changes', { 
        event: '*', 
        schema: 'public',
        table: 'vulnerability_scans',
        filter: `user_id=eq.${user.id}`
      }, (payload) => {
        // Update scans based on the event
        if (payload.eventType === 'INSERT') {
          setScans(prev => [payload.new as ScanResult, ...prev]);
        } else if (payload.eventType === 'UPDATE') {
          setScans(prev => prev.map(scan => 
            scan.id === payload.new.id ? (payload.new as ScanResult) : scan
          ));
          
          // Show toast for completed scan
          if (payload.new.status === 'completed') {
            toast.success(`Scan of ${payload.new.target} completed`);
          } else if (payload.new.status === 'failed') {
            toast.error(`Scan of ${payload.new.target} failed`);
          }
        } else if (payload.eventType === 'DELETE') {
          setScans(prev => prev.filter(scan => scan.id !== payload.old.id));
        }
      })
      .subscribe();
      
    return () => {
      supabase.removeChannel(scanSubscription);
    };
  }, [user]);
  
  const toggleExpand = (scanId: string) => {
    setExpandedScans(prev => ({
      ...prev,
      [scanId]: !prev[scanId]
    }));
  };
  
  const startScan = async () => {
    if (!user) return;
    
    if (!target) {
      toast.error('Please enter a URL or IP address');
      return;
    }
    
    // Validate the target (basic URL or IP validation)
    const urlPattern = /^(https?:\/\/)?([\w-]+(\.[\w-]+)+|localhost)(:\d+)?(\/\S*)?$/;
    const ipPattern = /^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/;
    
    if (!urlPattern.test(target) && !ipPattern.test(target)) {
      toast.error('Please enter a valid URL or IP address');
      return;
    }
    
    setIsScanning(true);
    
    try {
      // Create a new scan record
      const { data, error } = await supabase
        .from('vulnerability_scans')
        .insert({
          user_id: user.id,
          target,
          scan_type: scanType,
          status: 'running',
          started_at: new Date().toISOString()
        })
        .select()
        .single();
        
      if (error) throw error;
      
      toast.success('Scan started');
      
      // Simulate scanning process (this would be a real scan in production)
      simulateScan(data.id);
    } catch (error) {
      console.error('Error starting scan:', error);
      toast.error('Failed to start scan');
      setIsScanning(false);
    }
  };
  
  const deleteScan = async (scanId: string) => {
    if (!confirm('Are you sure you want to delete this scan?')) return;
    
    try {
      const { error } = await supabase
        .from('vulnerability_scans')
        .delete()
        .eq('id', scanId);
        
      if (error) throw error;
      
      setScans(prev => prev.filter(scan => scan.id !== scanId));
      toast.success('Scan deleted');
    } catch (error) {
      console.error('Error deleting scan:', error);
      toast.error('Failed to delete scan');
    }
  };
  
  // Simulate a scan (for demo purposes)
  const simulateScan = async (scanId: string) => {
    try {
      // Wait for a random amount of time (3-8 seconds) to simulate scanning
      const scanTime = Math.floor(Math.random() * 5000) + 3000;
      await new Promise(resolve => setTimeout(resolve, scanTime));
      
      // Generate scan results
      const results = generateScanResults(target, scanType);
      
      // Update the scan record
      await supabase
        .from('vulnerability_scans')
        .update({
          status: 'completed',
          results,
          completed_at: new Date().toISOString()
        })
        .eq('id', scanId);
    } catch (error) {
      console.error('Error in scan simulation:', error);
      
      // Update scan to failed status
      await supabase
        .from('vulnerability_scans')
        .update({
          status: 'failed',
          completed_at: new Date().toISOString()
        })
        .eq('id', scanId);
    } finally {
      setIsScanning(false);
    }
  };
  
  // Generate simulated scan results
  const generateScanResults = (target: string, scanType: string) => {
    // For demo purposes, generate different types of results
    const portResults = [];
    const openPorts = [80, 443, 22, 21];
    
    for (let i = 0; i < openPorts.length; i++) {
      if (Math.random() > 0.3) {
        portResults.push({
          port: openPorts[i],
          service: openPorts[i] === 80 ? 'http' : 
                  openPorts[i] === 443 ? 'https' : 
                  openPorts[i] === 22 ? 'ssh' : 'ftp',
          status: 'open'
        });
      }
    }
    
    const headerResults = {
      'Server': Math.random() > 0.5 ? 'Apache/2.4.41' : 'nginx/1.18.0',
      'X-Powered-By': Math.random() > 0.7 ? 'PHP/7.4.3' : undefined,
      'Content-Type': 'text/html; charset=UTF-8',
      'Content-Security-Policy': Math.random() > 0.6 ? undefined : "default-src 'self'",
      'X-Frame-Options': Math.random() > 0.4 ? undefined : 'SAMEORIGIN',
      'X-XSS-Protection': Math.random() > 0.5 ? undefined : '1; mode=block'
    };
    
    const vulnerabilities = [];
    const possibleVulns = [
      { name: 'Missing HTTP Security Headers', severity: 'medium', description: 'The application is missing several HTTP security headers that can help protect against common attacks.' },
      { name: 'SSL/TLS Weak Configuration', severity: 'high', description: 'The server supports outdated SSL/TLS protocols, ciphers, or configuration.' },
      { name: 'Open Ports Detected', severity: 'low', description: 'Several non-essential ports were found open, which increases the attack surface.' },
      { name: 'Software Version Disclosure', severity: 'low', description: 'The server is revealing software version information that could be used to target specific vulnerabilities.' },
      { name: 'Cross-Site Scripting (XSS)', severity: 'high', description: 'The application may be vulnerable to XSS attacks due to lack of output encoding.' },
      { name: 'SQL Injection', severity: 'critical', description: 'The application may be vulnerable to SQL injection attacks due to improper input validation.' },
      { name: 'Directory Listing Enabled', severity: 'medium', description: 'Directory listing is enabled on the server, which can expose sensitive files and directories.' },
      { name: 'Outdated Software', severity: 'high', description: 'The application is using outdated software with known vulnerabilities.' }
    ];
    
    // Add random vulnerabilities
    const vulnCount = Math.floor(Math.random() * 5) + 1;
    const selectedVulns = new Set();
    
    while (selectedVulns.size < vulnCount) {
      const index = Math.floor(Math.random() * possibleVulns.length);
      selectedVulns.add(index);
    }
    
    selectedVulns.forEach(index => {
      vulnerabilities.push(possibleVulns[index as number]);
    });
    
    return {
      summary: {
        target,
        scan_type: scanType,
        vulnerabilities_count: vulnerabilities.length,
        ports_open: portResults.length,
        security_score: Math.floor(Math.random() * 41) + 60 // 60-100
      },
      ports: portResults,
      headers: headerResults,
      vulnerabilities
    };
  };
  
  if (isLoading) {
    return (
      <div className="h-full flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }
  
  return (
    <div>
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4 gap-3">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Vulnerability Scanner</h1>
      </div>
      
      <div className="card mb-6">
        <div className="p-4">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">New Scan</h2>
          
          <div className="space-y-4">
            <div>
              <label htmlFor="target" className="form-label">
                Target URL or IP Address
              </label>
              <input
                id="target"
                type="text"
                value={target}
                onChange={(e) => setTarget(e.target.value)}
                className="form-input"
                placeholder="e.g., example.com or 192.168.1.1"
                disabled={isScanning}
              />
            </div>
            
            <div>
              <label htmlFor="scanType" className="form-label">
                Scan Type
              </label>
              <select
                id="scanType"
                value={scanType}
                onChange={(e) => setScanType(e.target.value)}
                className="form-input"
                disabled={isScanning}
              >
                <option value="quick">Quick Scan (Basic checks only)</option>
                <option value="comprehensive">Comprehensive Scan (Standard security checks)</option>
                <option value="full">Full Scan (All security checks, slower)</option>
              </select>
            </div>
            
            <button
              onClick={startScan}
              className="btn btn-primary"
              disabled={isScanning}
            >
              {isScanning ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-white mr-2"></div>
                  Scanning...
                </>
              ) : (
                <>
                  <Search className="h-5 w-5 mr-2" />
                  Start Scan
                </>
              )}
            </button>
          </div>
        </div>
      </div>
      
      <div className="card">
        <div className="p-4 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">Scan Results</h2>
        </div>
        
        {scans.length === 0 ? (
          <div className="p-8 text-center">
            <div className="mb-4 flex justify-center">
              <Search className="h-16 w-16 text-gray-300 dark:text-gray-600" />
            </div>
            <h3 className="text-xl font-medium text-gray-900 dark:text-white mb-2">No scans found</h3>
            <p className="text-gray-500 dark:text-gray-400 mb-4">
              Start by scanning a URL or IP address
            </p>
          </div>
        ) : (
          <div className="divide-y divide-gray-200 dark:divide-gray-700">
            {scans.map((scan) => (
              <div key={scan.id} className="p-4">
                <div className="flex flex-col sm:flex-row sm:items-center gap-4">
                  <div className="flex-grow">
                    <div className="flex items-center space-x-2">
                      <h3 className="text-lg font-medium text-gray-900 dark:text-white">{scan.target}</h3>
                      <div className={`text-xs px-2 py-0.5 rounded-full ${VulnerabilityScanner.getStatusColor(scan.status)}`}>
                        {scan.status.charAt(0).toUpperCase() + scan.status.slice(1)}
                      </div>
                    </div>
                    
                    <div className="text-sm text-gray-500 dark:text-gray-400 mt-1 flex flex-wrap gap-x-3 gap-y-1">
                      <div className="flex items-center">
                        <Calendar className="h-4 w-4 mr-1" />
                        {format(new Date(scan.created_at), 'MMM d, yyyy')}
                      </div>
                      <div className="flex items-center">
                        <Clock className="h-4 w-4 mr-1" />
                        {format(new Date(scan.created_at), 'h:mm a')}
                      </div>
                      <div className="flex items-center">
                        <Info className="h-4 w-4 mr-1" />
                        {scan.scan_type.charAt(0).toUpperCase() + scan.scan_type.slice(1)} Scan
                      </div>
                      {scan.status === 'completed' && scan.results && (
                        <div className="flex items-center">
                          <AlertCircle className="h-4 w-4 mr-1" />
                          {scan.results.summary.vulnerabilities_count} issues found
                        </div>
                      )}
                      {scan.status === 'completed' && scan.started_at && scan.completed_at && (
                        <div className="flex items-center">
                          <Clock className="h-4 w-4 mr-1" />
                          {VulnerabilityScanner.formatDuration(scan.started_at, scan.completed_at)}
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    {scan.status === 'running' && (
                      <button className="btn btn-outline">
                        <Pause className="h-4 w-4 mr-1" />
                        Stop
                      </button>
                    )}
                    
                    {scan.status === 'completed' && scan.results && (
                      <button 
                        onClick={() => toggleExpand(scan.id)}
                        className="btn btn-outline"
                      >
                        {expandedScans[scan.id] ? (
                          <>
                            <ChevronUp className="h-4 w-4 mr-1" />
                            Hide Results
                          </>
                        ) : (
                          <>
                            <ChevronDown className="h-4 w-4 mr-1" />
                            View Results
                          </>
                        )}
                      </button>
                    )}
                    
                    <button 
                      onClick={() => deleteScan(scan.id)}
                      className="btn btn-outline text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300"
                    >
                      <Trash2 className="h-4 w-4" />
                    </button>
                  </div>
                </div>
                
                {expandedScans[scan.id] && scan.results && (
                  <div className="mt-4 space-y-4">
                    {/* Summary */}
                    <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4">
                      <h4 className="text-md font-medium text-gray-900 dark:text-white mb-3">
                        Scan Summary
                      </h4>
                      
                      <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                        <div className="bg-white dark:bg-gray-700 rounded-lg p-3 shadow-sm">
                          <div className="text-sm text-gray-500 dark:text-gray-400">Security Score</div>
                          <div className="mt-1 flex items-center">
                            <BarChart3 className="h-5 w-5 text-indigo-500 mr-1" />
                            <span className="text-xl font-semibold text-gray-900 dark:text-white">
                              {scan.results.summary.security_score}/100
                            </span>
                          </div>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-700 rounded-lg p-3 shadow-sm">
                          <div className="text-sm text-gray-500 dark:text-gray-400">Vulnerabilities</div>
                          <div className="mt-1 flex items-center">
                            <AlertCircle className="h-5 w-5 text-red-500 mr-1" />
                            <span className="text-xl font-semibold text-gray-900 dark:text-white">
                              {scan.results.summary.vulnerabilities_count} found
                            </span>
                          </div>
                        </div>
                        
                        <div className="bg-white dark:bg-gray-700 rounded-lg p-3 shadow-sm">
                          <div className="text-sm text-gray-500 dark:text-gray-400">Open Ports</div>
                          <div className="mt-1 flex items-center">
                            <AlertCircle className="h-5 w-5 text-amber-500 mr-1" />
                            <span className="text-xl font-semibold text-gray-900 dark:text-white">
                              {scan.results.ports.length} detected
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    {/* Vulnerabilities */}
                    {scan.results.vulnerabilities.length > 0 && (
                      <div>
                        <h4 className="text-md font-medium text-gray-900 dark:text-white mb-3">
                          Vulnerabilities
                        </h4>
                        
                        <div className="space-y-2">
                          {scan.results.vulnerabilities.map((vuln: any, index: number) => (
                            <div 
                              key={index} 
                              className="bg-white dark:bg-gray-700 rounded-lg p-3 shadow-sm"
                            >
                              <div className="flex items-start">
                                <div className={`mt-0.5 p-1 rounded-full flex-shrink-0 ${
                                  vuln.severity === 'critical' ? 'bg-red-100 dark:bg-red-900/30' :
                                  vuln.severity === 'high' ? 'bg-orange-100 dark:bg-orange-900/30' :
                                  vuln.severity === 'medium' ? 'bg-amber-100 dark:bg-amber-900/30' :
                                  'bg-blue-100 dark:bg-blue-900/30'
                                }`}>
                                  {vuln.severity === 'critical' ? (
                                    <AlertCircle className={`h-5 w-5 ${VulnerabilityScanner.getSeverityColor(vuln.severity)}`} />
                                  ) : vuln.severity === 'high' ? (
                                    <AlertTriangle className={`h-5 w-5 ${VulnerabilityScanner.getSeverityColor(vuln.severity)}`} />
                                  ) : vuln.severity === 'medium' ? (
                                    <AlertCircle className={`h-5 w-5 ${VulnerabilityScanner.getSeverityColor(vuln.severity)}`} />
                                  ) : (
                                    <Info className={`h-5 w-5 ${VulnerabilityScanner.getSeverityColor(vuln.severity)}`} />
                                  )}
                                </div>
                                
                                <div className="ml-3 flex-grow">
                                  <div className="flex items-center justify-between">
                                    <div className="flex items-center">
                                      <h5 className="text-sm font-medium text-gray-900 dark:text-white">{vuln.name}</h5>
                                      <span className={`ml-2 text-xs px-2 py-0.5 rounded-full ${
                                        vuln.severity === 'critical' ? 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300' :
                                        vuln.severity === 'high' ? 'bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-300' :
                                        vuln.severity === 'medium' ? 'bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-300' :
                                        'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300'
                                      }`}>
                                        {vuln.severity.toUpperCase()}
                                      </span>
                                    </div>
                                  </div>
                                  
                                  <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
                                    {vuln.description}
                                  </p>
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                    
                    {/* Open Ports */}
                    {scan.results.ports.length > 0 && (
                      <div>
                        <h4 className="text-md font-medium text-gray-900 dark:text-white mb-3">
                          Open Ports
                        </h4>
                        
                        <div className="bg-white dark:bg-gray-700 rounded-lg shadow-sm overflow-hidden">
                          <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-600">
                            <thead className="bg-gray-50 dark:bg-gray-800">
                              <tr>
                                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                                  Port
                                </th>
                                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                                  Service
                                </th>
                                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                                  Status
                                </th>
                              </tr>
                            </thead>
                            <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                              {scan.results.ports.map((port: any, index: number) => (
                                <tr key={index}>
                                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                                    {port.port}
                                  </td>
                                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                                    {port.service}
                                  </td>
                                  <td className="px-4 py-3 whitespace-nowrap text-sm">
                                    <span className="px-2 py-1 rounded-full text-xs bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300">
                                      {port.status}
                                    </span>
                                  </td>
                                </tr>
                              ))}
                            </tbody>
                          </table>
                        </div>
                      </div>
                    )}
                    
                    {/* HTTP Headers */}
                    {scan.results.headers && Object.keys(scan.results.headers).length > 0 && (
                      <div>
                        <h4 className="text-md font-medium text-gray-900 dark:text-white mb-3">
                          HTTP Headers
                        </h4>
                        
                        <div className="bg-white dark:bg-gray-700 rounded-lg shadow-sm overflow-hidden">
                          <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-600">
                            <thead className="bg-gray-50 dark:bg-gray-800">
                              <tr>
                                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                                  Header
                                </th>
                                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                                  Value
                                </th>
                              </tr>
                            </thead>
                            <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                              {Object.entries(scan.results.headers).map(([key, value], index) => (
                                <tr key={index}>
                                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                                    {key}
                                  </td>
                                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                                    {value as string || '(not set)'}
                                  </td>
                                </tr>
                              ))}
                            </tbody>
                          </table>
                        </div>
                      </div>
                    )}
                    
                    <div className="flex justify-end">
                      <button className="btn btn-outline">
                        <Download className="h-4 w-4 mr-1" />
                        Export Report
                      </button>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

// Utility functions
VulnerabilityScanner.getStatusColor = (status: string): string => {
  switch (status) {
    case 'pending':
      return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
    case 'running':
      return 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300';
    case 'completed':
      return 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300';
    case 'failed':
      return 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300';
    default:
      return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
  }
};

VulnerabilityScanner.getSeverityColor = (severity: string): string => {
  switch (severity) {
    case 'critical':
      return 'text-red-600 dark:text-red-400';
    case 'high':
      return 'text-orange-600 dark:text-orange-400';
    case 'medium':
      return 'text-amber-600 dark:text-amber-400';
    case 'low':
      return 'text-blue-600 dark:text-blue-400';
    default:
      return 'text-gray-600 dark:text-gray-400';
  }
};

VulnerabilityScanner.formatDuration = (startDate: string, endDate: string | null): string => {
  if (!endDate) return 'In progress';
  
  const start = new Date(startDate).getTime();
  const end = new Date(endDate).getTime();
  const diff = end - start;
  
  const seconds = Math.floor(diff / 1000);
  if (seconds < 60) return `${seconds}s`;
  
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = seconds % 60;
  return `${minutes}m ${remainingSeconds}s`;
};

export default VulnerabilityScanner;