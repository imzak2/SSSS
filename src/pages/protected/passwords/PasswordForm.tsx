import React, { useState, useEffect } from 'react';
import { X, Eye, EyeOff, RefreshCw, AlertCircle } from 'lucide-react';
import { checkPasswordStrength, getStrengthColor, getStrengthLabel, generateStrongPassword } from '../../../utils/passwordStrength';
import { decryptData } from '../../../utils/encryption';

interface Password {
  id: string;
  title: string;
  website_url: string | null;
  username: string;
  encrypted_password: string;
  iv: string;
  strength_score: number;
  notes: string | null;
  created_at: string;
  updated_at: string;
}

interface PasswordFormProps {
  password: Password | null;
  onSubmit: (data: Omit<Password, 'id' | 'created_at' | 'updated_at'> & { password: string }) => void;
  onCancel: () => void;
  masterPassword: string;
}

const PasswordForm: React.FC<PasswordFormProps> = ({ password, onSubmit, onCancel, masterPassword }) => {
  const [title, setTitle] = useState(password?.title || '');
  const [website, setWebsite] = useState(password?.website_url || '');
  const [username, setUsername] = useState(password?.username || '');
  const [passwordValue, setPasswordValue] = useState('');
  const [notes, setNotes] = useState(password?.notes || '');
  const [showPassword, setShowPassword] = useState(false);
  const [isDecrypting, setIsDecrypting] = useState(false);
  
  const passwordStrength = checkPasswordStrength(passwordValue);
  const strengthColor = getStrengthColor(passwordStrength.score);
  const strengthLabel = getStrengthLabel(passwordStrength.score);
  
  // If editing, decrypt the password
  useEffect(() => {
    if (password && masterPassword) {
      setIsDecrypting(true);
      try {
        const decrypted = decryptData(password.encrypted_password, masterPassword, password.iv);
        setPasswordValue(decrypted);
      } catch (error) {
        console.error('Failed to decrypt password:', error);
        // If decryption fails, use empty password
      } finally {
        setIsDecrypting(false);
      }
    }
  }, [password, masterPassword]);
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    onSubmit({
      title,
      website_url: website || null,
      username,
      password: passwordValue,
      encrypted_password: '',  // These will be generated by the parent component
      iv: '',
      strength_score: passwordStrength.score,
      notes: notes || null
    });
  };
  
  const generatePassword = () => {
    const newPassword = generateStrongPassword();
    setPasswordValue(newPassword);
    setShowPassword(true);
  };
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-lg max-h-[90vh] overflow-auto">
        <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-xl font-bold text-gray-900 dark:text-white">
            {password ? 'Edit Password' : 'Add New Password'}
          </h2>
          <button 
            onClick={onCancel}
            className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
          >
            <X className="h-5 w-5" />
          </button>
        </div>
        
        <form onSubmit={handleSubmit} className="p-4">
          <div className="space-y-4">
            <div>
              <label htmlFor="title" className="form-label">
                Title
              </label>
              <input
                id="title"
                type="text"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                className="form-input"
                placeholder="e.g., Work Email, Amazon, Bank Account"
                required
              />
            </div>
            
            <div>
              <label htmlFor="website" className="form-label">
                Website URL
              </label>
              <input
                id="website"
                type="text"
                value={website}
                onChange={(e) => setWebsite(e.target.value)}
                className="form-input"
                placeholder="e.g., example.com"
              />
            </div>
            
            <div>
              <label htmlFor="username" className="form-label">
                Username / Email
              </label>
              <input
                id="username"
                type="text"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                className="form-input"
                placeholder="e.g., user@example.com"
                required
              />
            </div>
            
            <div>
              <div className="flex justify-between">
                <label htmlFor="password" className="form-label">
                  Password
                </label>
                <button
                  type="button"
                  onClick={generatePassword}
                  className="text-xs text-indigo-600 hover:text-indigo-500 dark:text-indigo-400 dark:hover:text-indigo-300 flex items-center"
                >
                  <RefreshCw className="h-3 w-3 mr-1" /> Generate Strong Password
                </button>
              </div>
              
              <div className="relative">
                <input
                  id="password"
                  type={showPassword ? 'text' : 'password'}
                  value={isDecrypting ? 'Decrypting...' : passwordValue}
                  onChange={(e) => setPasswordValue(e.target.value)}
                  className="form-input pr-10"
                  placeholder="••••••••"
                  required
                  disabled={isDecrypting}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-500"
                  onClick={() => setShowPassword(!showPassword)}
                  disabled={isDecrypting}
                >
                  {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}
                </button>
              </div>
              
              {!isDecrypting && passwordValue && (
                <div className="mt-2">
                  <div className="flex items-center">
                    <div className="w-full bg-gray-200 rounded-full h-1.5 dark:bg-gray-700">
                      <div 
                        className={`h-1.5 rounded-full ${
                          passwordStrength.score === 0 ? 'bg-red-500' :
                          passwordStrength.score === 1 ? 'bg-red-500' :
                          passwordStrength.score === 2 ? 'bg-orange-500' :
                          passwordStrength.score === 3 ? 'bg-yellow-500' :
                          'bg-green-500'
                        }`}
                        style={{ width: `${(passwordStrength.score + 1) * 20}%` }}
                      ></div>
                    </div>
                    <span className={`ml-2 text-sm ${strengthColor}`}>{strengthLabel}</span>
                  </div>
                  
                  {passwordStrength.feedback.warning && (
                    <div className="mt-1 flex items-start text-xs text-red-600 dark:text-red-400">
                      <AlertCircle className="h-3 w-3 mt-0.5 mr-1 flex-shrink-0" />
                      <span>{passwordStrength.feedback.warning}</span>
                    </div>
                  )}
                  
                  {passwordStrength.feedback.suggestions.length > 0 && (
                    <div className="mt-1 text-xs text-gray-500 dark:text-gray-400">
                      <strong>Tips:</strong>
                      <ul className="list-disc list-inside">
                        {passwordStrength.feedback.suggestions.map((suggestion, index) => (
                          <li key={index}>{suggestion}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              )}
            </div>
            
            <div>
              <label htmlFor="notes" className="form-label">
                Notes
              </label>
              <textarea
                id="notes"
                value={notes}
                onChange={(e) => setNotes(e.target.value)}
                className="form-input min-h-[100px]"
                placeholder="Additional notes about this account..."
              ></textarea>
            </div>
          </div>
          
          <div className="mt-6 flex justify-end space-x-3">
            <button 
              type="button" 
              onClick={onCancel}
              className="btn btn-outline"
            >
              Cancel
            </button>
            <button 
              type="submit" 
              className="btn btn-primary"
              disabled={isDecrypting}
            >
              {password ? 'Update Password' : 'Save Password'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default PasswordForm;